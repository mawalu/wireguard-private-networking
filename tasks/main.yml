---
- name: Install linux headers (Ubuntu)
  apt:
    update_cache: yes
    state: present
    name: linux-headers-generic
  when:
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_major_version|int < 20

- name: Add backports repository (Debian)
  block:
    - name: Add backports repository list (Debian)
      copy:
        src: templates/backports.list
        dest: /etc/apt/sources.list.d/backport.list

    - name: Add backports repository key (Debian)
      apt_key:
        url: https://ftp-master.debian.org/keys/archive-key-{{ ansible_lsb.release }}.asc
        state: present
  when:
    - ansible_distribution == "Debian" and debian_enable_backports and ansible_architecture != "armv61"

- name: Check that is proxmox
  stat:
    path: /etc/pve
  register: is_proxmox
  when: ansible_distribution == "Debian"

- name: Install linux headers when debian proxmox
  apt:
    update_cache: yes
    state: present
    name: pve-headers
  when: ansible_distribution == "Debian" and is_proxmox.stat.exists

- name: Install Raspberry Pi Kernel Headers
  apt:
    update_cache: yes
    state: present
    name: raspberrypi-kernel-headers
  register: raspberrypi_kernel_headers_result
  when: ansible_distribution == "Debian" and ansible_lsb.id == "Raspbian"

- name: Install WireGuard (Raspberry Pi 2, Raspberry Pi Zero W)
  block:
    - name: Check if manual builds and reboots are required
      assert:
        that:
          - allow_build_from_source is true
        fail_msg: "The installation on this platform requires a manual build and possibly a reboot. Please allow these actions by setting the flag 'allow_build_from_source'"

    - name: Install compile dependencies
      apt:
        update_cache: yes
        state: present
        name:
          - bc
          - bison
          - checkinstall
          - build-essential
          - flex
          - git
          - libelf-dev
          - libmnl-dev
          - libncurses5-dev
          - libssl-dev

    - name: Initial download of rpi-source
      get_url:
        url: 'https://raw.githubusercontent.com/RPi-Distro/rpi-source/master/rpi-source'
        dest: '/usr/local/bin/rpi-source'
        mode: u=rwx,g=rx,o=rx

    - name: Reboot Raspberry Pi and wait for it to come back up
      reboot:
      when: raspberrypi_kernel_headers_result.changed

    - name: Run rpi-source
      command: /usr/local/bin/rpi-source
      register: rpi_source_result
      changed_when: "rpi_source_result.rc == 0"
      failed_when: "'FAILED' in rpi_source_result.stderr"

    - name: Reboot Raspberry Pi and wait for it to come back up
      reboot:
      when: rpi_source_result.changed

    - name: Clone WireGuard source
      git:
        repo: 'https://git.zx2c4.com/wireguard-linux-compat/'
        update: true
        dest: "{{ wireguard_sources_path }}/wireguard-linux-compat"

    - name: Build WireGuard
      community.general.make:
        chdir: "{{ wireguard_sources_path }}/wireguard-linux-compat/src"
      register: wireguard_build_result

    - name: Install WireGuard
      command:
        chdir: "{{ wireguard_sources_path }}/wireguard-linux-compat/src"
        cmd: checkinstall -y --pkgname wireguard
      when: wireguard_build_result.changed

    - name: Clone WireGuard tools source
      git:
        repo: 'https://git.zx2c4.com/wireguard-tools'
        update: true
        dest: "{{ wireguard_sources_path }}/wireguard-tools"

    - name: Build WireGuard tools
      community.general.make:
        chdir: "{{ wireguard_sources_path }}/wireguard-tools/src"
      register: wireguard_tools_build_result

    - name: Install WireGuard tools
      command:
        chdir: "{{ wireguard_sources_path }}/wireguard-tools/src"
        cmd: checkinstall -y --pkgname wireguard-tools
      when: wireguard_tools_build_result.changed

  when: ansible_distribution == "Debian" and ansible_lsb.id == "Raspbian" and ansible_architecture == "armv6l"

- name: Install wireguard (apt)
  apt:
    update_cache: yes
    state: present
    name: wireguard
  when:
    - ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" and ansible_architecture != "armv6l"

- name: Install wireguard (pacman)
  pacman:
    name:
      - wireguard-dkms
      - wireguard-tools
    state: present
  when:
    - ansible_distribution == "Archlinux"

- name: Install wireguard (CentOS 8)
  block:
    - name: Install epel repo (CentOS 8)
      dnf:
        name:
          - elrepo-release
          - epel-release
        state: present

    - name: Install mod and tools (CentOS 8)
      dnf:
        name:
          - kmod-wireguard
          - wireguard-tools
        state: present

    - name: Create path (CentOS 8)
      file:
        path: "{{ wireguard_path }}"
        state: directory
        mode: u=rwx,g=,o=
        group: root

  when: ansible_facts['distribution'] == "CentOS" and ansible_facts['distribution_major_version'] == "8"

- name: Install wireguard (CentOS 7)
  block:
    - name: Install epel (CentOS 7)
      yum:
        name:
          - epel-release
          - https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm
        state: present

    - name: Install plugin-elrepo wireguard (CentOS 7)
      yum:
        name:
          - yum-plugin-elrepo
        state: present

    - name: Install wireguard module and tools (CentOS 7)
      yum:
        name:
          - kmod-wireguard
          - wireguard-tools
        state: present

    - name: Creat path (CentOS 7)
      file:
        path: "{{ wireguard_path }}"
        state: directory
        mode: u=rwx,g=,o=
        group: root

  when: ansible_facts['distribution'] == "CentOS" and ansible_facts['distribution_major_version'] == "7"

- name: Install wireguard and tools (zypper)
  zypper:
    name:
      - wireguard-tools
    state: present
  when:
    - ansible_distribution == "openSUSE Leap"

- name: Ensure wireguard_path exists as directory
  file:
    path: "{{ wireguard_path }}"
    state: directory

- name: Read private key
  stat:
    path: "{{ wireguard_path }}/privatekey"
  register: privatekey
  when: not ansible_check_mode

- name: Generate wireguard keys
  shell: set -o pipefail && \
         umask 077; wg genkey | tee {{ wireguard_path  }}/privatekey | wg pubkey > {{ wireguard_path }}/publickey
  args:
    executable: /bin/bash
  when:
    - not ansible_check_mode
    - not privatekey.stat.exists

- name: Read private key
  slurp:
    src: "{{ wireguard_path }}/privatekey"
  register: private
  when: not ansible_check_mode

- name: Read public key
  slurp:
    src: "{{ wireguard_path }}/publickey"
  register: public
  when: not ansible_check_mode

- name: Read private client's key
  stat:
    path: "{{ wireguard_path }}/client_privatekey"
  register: client_privatekey
  run_once: true
  when: client_vpn_ip | length > 0

- name: Generate wireguard client's keys
  shell: set -o pipefail && \
         umask 077; wg genkey | tee {{ wireguard_path  }}/client_privatekey | wg pubkey > {{ wireguard_path }}/client_publickey
  run_once: true
  args:
    executable: /bin/bash
  when:
    - client_vpn_ip | length > 0
    - not client_privatekey.stat.exists

- name: Read private client's key
  slurp:
    src: "{{ wireguard_path }}/client_privatekey"
  register: client_privatekey
  run_once: true
  when:
    - not ansible_check_mode
    - client_vpn_ip | length > 0

- name: Read public client's key
  slurp:
    src: "{{ wireguard_path }}/client_publickey"
  register: client_publickey
  run_once: true
  when:
    - not ansible_check_mode
    - client_vpn_ip | length > 0

- name: Generate configs
  template:
    src: interface.conf.j2
    dest: "{{ wireguard_path }}/{{ wireguard_network_name }}.conf"
    owner: root
    group: root
    mode: "u=rw,g=r,o="
  register: config
  notify:
    - Enable wg-quick service
    - Restart wg-quick service
  when: not ansible_check_mode

- name: Generate client's config
  template:
    src: client.conf.j2
    dest: "{{ client_wireguard_path }}"
    mode: "u=rw,g=,o="
  vars:
    ansible_connection: local
  become: no
  run_once: true
  when:
    - not ansible_check_mode
    - client_vpn_ip | length > 0
  delegate_to: localhost
  notify:
    - Enable wg-quick service
    - Restart wg-quick service
